/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ImQuarkSubscriber {
  export type SellOrderStruct = {
    seller: PromiseOrValue<string>;
    fromContractAddress: PromiseOrValue<string>;
    fromTokenId: PromiseOrValue<BigNumberish>;
    entityId: PromiseOrValue<BigNumberish>;
    slotUri: PromiseOrValue<string>;
    sellPrice: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
  };

  export type SellOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    seller: string;
    fromContractAddress: string;
    fromTokenId: BigNumber;
    entityId: BigNumber;
    slotUri: string;
    sellPrice: BigNumber;
    salt: string;
  };

  export type BuyOrderStruct = {
    buyer: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
    fromContractAddress: PromiseOrValue<string>;
    fromTokenId: PromiseOrValue<BigNumberish>;
    toContractAddress: PromiseOrValue<string>;
    toTokenId: PromiseOrValue<BigNumberish>;
    entityId: PromiseOrValue<BigNumberish>;
    slotUri: PromiseOrValue<string>;
    buyPrice: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
  };

  export type BuyOrderStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    buyer: string;
    seller: string;
    fromContractAddress: string;
    fromTokenId: BigNumber;
    toContractAddress: string;
    toTokenId: BigNumber;
    entityId: BigNumber;
    slotUri: string;
    buyPrice: BigNumber;
    salt: string;
  };
}

export interface ImQuarkSubscriberInterface extends utils.Interface {
  functions: {
    "calculateBatchSubscriptionPrice(uint256[])": FunctionFragment;
    "getCollection(address)": FunctionFragment;
    "getEntityBalance(uint256)": FunctionFragment;
    "getEntityConfig(uint256)": FunctionFragment;
    "getIsAddressRegisteredAsEntity(address)": FunctionFragment;
    "getIsSubscribed(uint256,address,uint256)": FunctionFragment;
    "getIsUnlocked(uint256,address)": FunctionFragment;
    "initializeEntity(address,uint256,address,string,uint256)": FunctionFragment;
    "setCollection(bool,bool,uint256,uint256,address)": FunctionFragment;
    "setControllerAddress(address)": FunctionFragment;
    "setDefaultURI(uint256,string)": FunctionFragment;
    "setImportedContractsAddress(address)": FunctionFragment;
    "setRegistryAddress(address)": FunctionFragment;
    "setRoyalty(uint256)": FunctionFragment;
    "setSigner(uint256,address)": FunctionFragment;
    "setSubscriptionPrice(uint256,uint256)": FunctionFragment;
    "subscribeToEntities(uint256,address,uint256[])": FunctionFragment;
    "subscribeToEntity(uint256,address,uint256)": FunctionFragment;
    "transferTokenEntityURI((address,address,uint256,uint256,string,uint256,bytes),(address,address,address,uint256,address,uint256,uint256,string,uint256,bytes),bytes,bytes)": FunctionFragment;
    "unlockToken(uint256,address)": FunctionFragment;
    "updateURISlot(bytes,bytes)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawProtocol(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateBatchSubscriptionPrice"
      | "getCollection"
      | "getEntityBalance"
      | "getEntityConfig"
      | "getIsAddressRegisteredAsEntity"
      | "getIsSubscribed"
      | "getIsUnlocked"
      | "initializeEntity"
      | "setCollection"
      | "setControllerAddress"
      | "setDefaultURI"
      | "setImportedContractsAddress"
      | "setRegistryAddress"
      | "setRoyalty"
      | "setSigner"
      | "setSubscriptionPrice"
      | "subscribeToEntities"
      | "subscribeToEntity"
      | "transferTokenEntityURI"
      | "unlockToken"
      | "updateURISlot"
      | "withdraw"
      | "withdrawProtocol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateBatchSubscriptionPrice",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsAddressRegisteredAsEntity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsSubscribed",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsUnlocked",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeEntity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollection",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setImportedContractsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToEntities",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToEntity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenEntityURI",
    values: [
      ImQuarkSubscriber.SellOrderStruct,
      ImQuarkSubscriber.BuyOrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateURISlot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateBatchSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsAddressRegisteredAsEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImportedContractsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenEntityURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateURISlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocol",
    data: BytesLike
  ): Result;

  events: {
    "ControllerSet(address)": EventFragment;
    "DefaultURISet(uint256,string)": EventFragment;
    "EntityInitialized(address,uint256,address,string,uint256)": EventFragment;
    "ImportedContractsSet(address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "RoyaltySet(uint256)": EventFragment;
    "SignerSet(uint256,address)": EventFragment;
    "Subscribed(uint256,address,uint256,address,string,uint256)": EventFragment;
    "SubscribedBatch(uint256,address,uint256[],address,string[],uint256)": EventFragment;
    "SubscriptionPriceSet(uint256,uint256)": EventFragment;
    "TokenEntityUriTransferred(address,uint256,address,uint256,uint256,uint256,string,address,address)": EventFragment;
    "URISlotUpdated(uint256,address,uint256,string)": EventFragment;
    "Unlocked(uint256,address,address,uint256)": EventFragment;
    "Withdraw(uint256,address,uint256)": EventFragment;
    "WithdrawProtocol(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntityInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImportedContractsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscribedBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenEntityUriTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISlotUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProtocol"): EventFragment;
}

export interface ControllerSetEventObject {
  controller: string;
}
export type ControllerSetEvent = TypedEvent<[string], ControllerSetEventObject>;

export type ControllerSetEventFilter = TypedEventFilter<ControllerSetEvent>;

export interface DefaultURISetEventObject {
  entityId: BigNumber;
  defaultURI: string;
}
export type DefaultURISetEvent = TypedEvent<
  [BigNumber, string],
  DefaultURISetEventObject
>;

export type DefaultURISetEventFilter = TypedEventFilter<DefaultURISetEvent>;

export interface EntityInitializedEventObject {
  contractAddress: string;
  entityId: BigNumber;
  signer: string;
  defaultURI: string;
  price: BigNumber;
}
export type EntityInitializedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  EntityInitializedEventObject
>;

export type EntityInitializedEventFilter =
  TypedEventFilter<EntityInitializedEvent>;

export interface ImportedContractsSetEventObject {
  importedContracts: string;
}
export type ImportedContractsSetEvent = TypedEvent<
  [string],
  ImportedContractsSetEventObject
>;

export type ImportedContractsSetEventFilter =
  TypedEventFilter<ImportedContractsSetEvent>;

export interface RegistrySetEventObject {
  registry: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface RoyaltySetEventObject {
  royalty: BigNumber;
}
export type RoyaltySetEvent = TypedEvent<[BigNumber], RoyaltySetEventObject>;

export type RoyaltySetEventFilter = TypedEventFilter<RoyaltySetEvent>;

export interface SignerSetEventObject {
  entityId: BigNumber;
  signer: string;
}
export type SignerSetEvent = TypedEvent<
  [BigNumber, string],
  SignerSetEventObject
>;

export type SignerSetEventFilter = TypedEventFilter<SignerSetEvent>;

export interface SubscribedEventObject {
  tokenId: BigNumber;
  tokenContract: string;
  subscriptionId: BigNumber;
  to: string;
  defaultUri: string;
  amount: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SubscribedBatchEventObject {
  tokenId: BigNumber;
  tokenContract: string;
  subscriptionIds: BigNumber[];
  to: string;
  defaultUris: string[];
  amount: BigNumber;
}
export type SubscribedBatchEvent = TypedEvent<
  [BigNumber, string, BigNumber[], string, string[], BigNumber],
  SubscribedBatchEventObject
>;

export type SubscribedBatchEventFilter = TypedEventFilter<SubscribedBatchEvent>;

export interface SubscriptionPriceSetEventObject {
  entityId: BigNumber;
  price: BigNumber;
}
export type SubscriptionPriceSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  SubscriptionPriceSetEventObject
>;

export type SubscriptionPriceSetEventFilter =
  TypedEventFilter<SubscriptionPriceSetEvent>;

export interface TokenEntityUriTransferredEventObject {
  fromTokenContract: string;
  fromTokenId: BigNumber;
  toTokenContract: string;
  toTokenId: BigNumber;
  entityId: BigNumber;
  price: BigNumber;
  uri: string;
  from: string;
  to: string;
}
export type TokenEntityUriTransferredEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  TokenEntityUriTransferredEventObject
>;

export type TokenEntityUriTransferredEventFilter =
  TypedEventFilter<TokenEntityUriTransferredEvent>;

export interface URISlotUpdatedEventObject {
  entityId: BigNumber;
  tokenContract: string;
  tokenId: BigNumber;
  updatedUri: string;
}
export type URISlotUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  URISlotUpdatedEventObject
>;

export type URISlotUpdatedEventFilter = TypedEventFilter<URISlotUpdatedEvent>;

export interface UnlockedEventObject {
  tokenId: BigNumber;
  tokenContract: string;
  to: string;
  amount: BigNumber;
}
export type UnlockedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  UnlockedEventObject
>;

export type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;

export interface WithdrawEventObject {
  entityId: BigNumber;
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawProtocolEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawProtocolEvent = TypedEvent<
  [string, BigNumber],
  WithdrawProtocolEventObject
>;

export type WithdrawProtocolEventFilter =
  TypedEventFilter<WithdrawProtocolEvent>;

export interface ImQuarkSubscriber extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImQuarkSubscriberInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateBatchSubscriptionPrice(
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollection(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean, string] & {
        entityId: BigNumber;
        templateId: BigNumber;
        free: boolean;
        isExternal: boolean;
        collectionAddress: string;
      }
    >;

    getEntityBalance(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntityConfig(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, string] & {
        entityId_: BigNumber;
        subscriptionPrice: BigNumber;
        defaultURI: string;
        uriSet: boolean;
        signer: string;
      }
    >;

    getIsAddressRegisteredAsEntity(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsSubscribed(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsUnlocked(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeEntity(
      contract_: PromiseOrValue<string>,
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      defaultURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollection(
      free: PromiseOrValue<boolean>,
      external_: PromiseOrValue<boolean>,
      entityId: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setControllerAddress(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultURI(
      entityId: PromiseOrValue<BigNumberish>,
      defaultURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setImportedContractsAddress(
      externalCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistryAddress(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubscriptionPrice(
      entityId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeToEntities(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeToEntity(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokenEntityURI(
      seller: ImQuarkSubscriber.SellOrderStruct,
      buyer: ImQuarkSubscriber.BuyOrderStruct,
      sellerSignature: PromiseOrValue<BytesLike>,
      buyerSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateURISlot(
      signature: PromiseOrValue<BytesLike>,
      updateInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      entityId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocol(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateBatchSubscriptionPrice(
    subscriptionIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollection(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean, string] & {
      entityId: BigNumber;
      templateId: BigNumber;
      free: boolean;
      isExternal: boolean;
      collectionAddress: string;
    }
  >;

  getEntityBalance(
    entityId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntityConfig(
    entityId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean, string] & {
      entityId_: BigNumber;
      subscriptionPrice: BigNumber;
      defaultURI: string;
      uriSet: boolean;
      signer: string;
    }
  >;

  getIsAddressRegisteredAsEntity(
    address_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsSubscribed(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsUnlocked(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeEntity(
    contract_: PromiseOrValue<string>,
    entityId: PromiseOrValue<BigNumberish>,
    signer: PromiseOrValue<string>,
    defaultURI: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollection(
    free: PromiseOrValue<boolean>,
    external_: PromiseOrValue<boolean>,
    entityId: PromiseOrValue<BigNumberish>,
    templateId: PromiseOrValue<BigNumberish>,
    collectionAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setControllerAddress(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultURI(
    entityId: PromiseOrValue<BigNumberish>,
    defaultURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setImportedContractsAddress(
    externalCollection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistryAddress(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyalty(
    royalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    entityId: PromiseOrValue<BigNumberish>,
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubscriptionPrice(
    entityId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeToEntities(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    subscriptionIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeToEntity(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokenEntityURI(
    seller: ImQuarkSubscriber.SellOrderStruct,
    buyer: ImQuarkSubscriber.BuyOrderStruct,
    sellerSignature: PromiseOrValue<BytesLike>,
    buyerSignature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateURISlot(
    signature: PromiseOrValue<BytesLike>,
    updateInfo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    entityId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocol(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateBatchSubscriptionPrice(
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean, string] & {
        entityId: BigNumber;
        templateId: BigNumber;
        free: boolean;
        isExternal: boolean;
        collectionAddress: string;
      }
    >;

    getEntityBalance(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityConfig(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, string] & {
        entityId_: BigNumber;
        subscriptionPrice: BigNumber;
        defaultURI: string;
        uriSet: boolean;
        signer: string;
      }
    >;

    getIsAddressRegisteredAsEntity(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsSubscribed(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsUnlocked(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeEntity(
      contract_: PromiseOrValue<string>,
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      defaultURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollection(
      free: PromiseOrValue<boolean>,
      external_: PromiseOrValue<boolean>,
      entityId: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setControllerAddress(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultURI(
      entityId: PromiseOrValue<BigNumberish>,
      defaultURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setImportedContractsAddress(
      externalCollection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistryAddress(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscriptionPrice(
      entityId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToEntities(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToEntity(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenEntityURI(
      seller: ImQuarkSubscriber.SellOrderStruct,
      buyer: ImQuarkSubscriber.BuyOrderStruct,
      sellerSignature: PromiseOrValue<BytesLike>,
      buyerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateURISlot(
      signature: PromiseOrValue<BytesLike>,
      updateInfo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      entityId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocol(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllerSet(address)"(controller?: null): ControllerSetEventFilter;
    ControllerSet(controller?: null): ControllerSetEventFilter;

    "DefaultURISet(uint256,string)"(
      entityId?: null,
      defaultURI?: null
    ): DefaultURISetEventFilter;
    DefaultURISet(entityId?: null, defaultURI?: null): DefaultURISetEventFilter;

    "EntityInitialized(address,uint256,address,string,uint256)"(
      contractAddress?: null,
      entityId?: null,
      signer?: null,
      defaultURI?: null,
      price?: null
    ): EntityInitializedEventFilter;
    EntityInitialized(
      contractAddress?: null,
      entityId?: null,
      signer?: null,
      defaultURI?: null,
      price?: null
    ): EntityInitializedEventFilter;

    "ImportedContractsSet(address)"(
      importedContracts?: null
    ): ImportedContractsSetEventFilter;
    ImportedContractsSet(
      importedContracts?: null
    ): ImportedContractsSetEventFilter;

    "RegistrySet(address)"(registry?: null): RegistrySetEventFilter;
    RegistrySet(registry?: null): RegistrySetEventFilter;

    "RoyaltySet(uint256)"(royalty?: null): RoyaltySetEventFilter;
    RoyaltySet(royalty?: null): RoyaltySetEventFilter;

    "SignerSet(uint256,address)"(
      entityId?: null,
      signer?: null
    ): SignerSetEventFilter;
    SignerSet(entityId?: null, signer?: null): SignerSetEventFilter;

    "Subscribed(uint256,address,uint256,address,string,uint256)"(
      tokenId?: null,
      tokenContract?: null,
      subscriptionId?: null,
      to?: null,
      defaultUri?: null,
      amount?: null
    ): SubscribedEventFilter;
    Subscribed(
      tokenId?: null,
      tokenContract?: null,
      subscriptionId?: null,
      to?: null,
      defaultUri?: null,
      amount?: null
    ): SubscribedEventFilter;

    "SubscribedBatch(uint256,address,uint256[],address,string[],uint256)"(
      tokenId?: null,
      tokenContract?: null,
      subscriptionIds?: null,
      to?: null,
      defaultUris?: null,
      amount?: null
    ): SubscribedBatchEventFilter;
    SubscribedBatch(
      tokenId?: null,
      tokenContract?: null,
      subscriptionIds?: null,
      to?: null,
      defaultUris?: null,
      amount?: null
    ): SubscribedBatchEventFilter;

    "SubscriptionPriceSet(uint256,uint256)"(
      entityId?: null,
      price?: null
    ): SubscriptionPriceSetEventFilter;
    SubscriptionPriceSet(
      entityId?: null,
      price?: null
    ): SubscriptionPriceSetEventFilter;

    "TokenEntityUriTransferred(address,uint256,address,uint256,uint256,uint256,string,address,address)"(
      fromTokenContract?: null,
      fromTokenId?: null,
      toTokenContract?: null,
      toTokenId?: null,
      entityId?: null,
      price?: null,
      uri?: null,
      from?: null,
      to?: null
    ): TokenEntityUriTransferredEventFilter;
    TokenEntityUriTransferred(
      fromTokenContract?: null,
      fromTokenId?: null,
      toTokenContract?: null,
      toTokenId?: null,
      entityId?: null,
      price?: null,
      uri?: null,
      from?: null,
      to?: null
    ): TokenEntityUriTransferredEventFilter;

    "URISlotUpdated(uint256,address,uint256,string)"(
      entityId?: null,
      tokenContract?: null,
      tokenId?: null,
      updatedUri?: null
    ): URISlotUpdatedEventFilter;
    URISlotUpdated(
      entityId?: null,
      tokenContract?: null,
      tokenId?: null,
      updatedUri?: null
    ): URISlotUpdatedEventFilter;

    "Unlocked(uint256,address,address,uint256)"(
      tokenId?: null,
      tokenContract?: null,
      to?: null,
      amount?: null
    ): UnlockedEventFilter;
    Unlocked(
      tokenId?: null,
      tokenContract?: null,
      to?: null,
      amount?: null
    ): UnlockedEventFilter;

    "Withdraw(uint256,address,uint256)"(
      entityId?: null,
      to?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(entityId?: null, to?: null, amount?: null): WithdrawEventFilter;

    "WithdrawProtocol(address,uint256)"(
      to?: null,
      amount?: null
    ): WithdrawProtocolEventFilter;
    WithdrawProtocol(to?: null, amount?: null): WithdrawProtocolEventFilter;
  };

  estimateGas: {
    calculateBatchSubscriptionPrice(
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityBalance(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityConfig(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsAddressRegisteredAsEntity(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsSubscribed(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsUnlocked(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeEntity(
      contract_: PromiseOrValue<string>,
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      defaultURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollection(
      free: PromiseOrValue<boolean>,
      external_: PromiseOrValue<boolean>,
      entityId: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setControllerAddress(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultURI(
      entityId: PromiseOrValue<BigNumberish>,
      defaultURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setImportedContractsAddress(
      externalCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistryAddress(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubscriptionPrice(
      entityId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeToEntities(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeToEntity(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokenEntityURI(
      seller: ImQuarkSubscriber.SellOrderStruct,
      buyer: ImQuarkSubscriber.BuyOrderStruct,
      sellerSignature: PromiseOrValue<BytesLike>,
      buyerSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateURISlot(
      signature: PromiseOrValue<BytesLike>,
      updateInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      entityId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocol(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateBatchSubscriptionPrice(
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollection(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntityBalance(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntityConfig(
      entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsAddressRegisteredAsEntity(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsSubscribed(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsUnlocked(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeEntity(
      contract_: PromiseOrValue<string>,
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      defaultURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollection(
      free: PromiseOrValue<boolean>,
      external_: PromiseOrValue<boolean>,
      entityId: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setControllerAddress(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultURI(
      entityId: PromiseOrValue<BigNumberish>,
      defaultURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setImportedContractsAddress(
      externalCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistryAddress(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      entityId: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubscriptionPrice(
      entityId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeToEntities(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeToEntity(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenEntityURI(
      seller: ImQuarkSubscriber.SellOrderStruct,
      buyer: ImQuarkSubscriber.BuyOrderStruct,
      sellerSignature: PromiseOrValue<BytesLike>,
      buyerSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateURISlot(
      signature: PromiseOrValue<BytesLike>,
      updateInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      entityId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocol(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
