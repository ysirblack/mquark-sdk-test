/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ImQuarkTemplateInterface extends utils.Interface {
  functions: {
    "createBatchCategory(string[],string[])": FunctionFragment;
    "createBatchTemplate(string[])": FunctionFragment;
    "createCategory(string,string)": FunctionFragment;
    "createTemplate(string)": FunctionFragment;
    "getAllCategoryTemplates(string)": FunctionFragment;
    "getCategoryById(uint256)": FunctionFragment;
    "getCategoryByName(string)": FunctionFragment;
    "getCategoryBySelector(bytes4)": FunctionFragment;
    "getCategoryTemplateLength(string)": FunctionFragment;
    "getCategoryTemplatesByIndex(string,uint16,uint16)": FunctionFragment;
    "getLastTemplateId()": FunctionFragment;
    "getTemplatesCategory(uint256)": FunctionFragment;
    "isTemplateIdExist(uint256)": FunctionFragment;
    "removeCategoryFromTemplate(string,uint256)": FunctionFragment;
    "setTemplateCategory(string,uint256[])": FunctionFragment;
    "templateUri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createBatchCategory"
      | "createBatchTemplate"
      | "createCategory"
      | "createTemplate"
      | "getAllCategoryTemplates"
      | "getCategoryById"
      | "getCategoryByName"
      | "getCategoryBySelector"
      | "getCategoryTemplateLength"
      | "getCategoryTemplatesByIndex"
      | "getLastTemplateId"
      | "getTemplatesCategory"
      | "isTemplateIdExist"
      | "removeCategoryFromTemplate"
      | "setTemplateCategory"
      | "templateUri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBatchCategory",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatchTemplate",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTemplate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCategoryTemplates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryBySelector",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryTemplateLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryTemplatesByIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplatesCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTemplateIdExist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCategoryFromTemplate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTemplateCategory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "templateUri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createBatchCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatchTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCategoryTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryBySelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryTemplateLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryTemplatesByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplatesCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTemplateIdExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCategoryFromTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTemplateCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateUri",
    data: BytesLike
  ): Result;

  events: {
    "CategoriesSet(string,uint256[])": EventFragment;
    "CategoryCreated(string,uint256,bytes4,string)": EventFragment;
    "CategoryRemoved(string,uint256)": EventFragment;
    "TemplateCreated(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CategoriesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplateCreated"): EventFragment;
}

export interface CategoriesSetEventObject {
  category: string;
  templateIds: BigNumber[];
}
export type CategoriesSetEvent = TypedEvent<
  [string, BigNumber[]],
  CategoriesSetEventObject
>;

export type CategoriesSetEventFilter = TypedEventFilter<CategoriesSetEvent>;

export interface CategoryCreatedEventObject {
  category: string;
  id: BigNumber;
  selector: string;
  uri: string;
}
export type CategoryCreatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  CategoryCreatedEventObject
>;

export type CategoryCreatedEventFilter = TypedEventFilter<CategoryCreatedEvent>;

export interface CategoryRemovedEventObject {
  category: string;
  templateId: BigNumber;
}
export type CategoryRemovedEvent = TypedEvent<
  [string, BigNumber],
  CategoryRemovedEventObject
>;

export type CategoryRemovedEventFilter = TypedEventFilter<CategoryRemovedEvent>;

export interface TemplateCreatedEventObject {
  templateId: BigNumber;
  uri: string;
}
export type TemplateCreatedEvent = TypedEvent<
  [BigNumber, string],
  TemplateCreatedEventObject
>;

export type TemplateCreatedEventFilter = TypedEventFilter<TemplateCreatedEvent>;

export interface ImQuarkTemplate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImQuarkTemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBatchCategory(
      names: PromiseOrValue<string>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBatchTemplate(
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCategory(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTemplate(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllCategoryTemplates(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCategoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { selector: string; name: string; uri: string }
    >;

    getCategoryByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        selector: string;
        uri: string;
      }
    >;

    getCategoryBySelector(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & { id: BigNumber; name: string; uri: string }
    >;

    getCategoryTemplateLength(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCategoryTemplatesByIndex(
      category: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      batchLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLastTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTemplatesCategory(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isTemplateIdExist(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exist: boolean }>;

    removeCategoryFromTemplate(
      category: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTemplateCategory(
      category: PromiseOrValue<string>,
      templateIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    templateUri(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createBatchCategory(
    names: PromiseOrValue<string>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBatchTemplate(
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCategory(
    name: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTemplate(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllCategoryTemplates(
    category: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCategoryById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { selector: string; name: string; uri: string }
  >;

  getCategoryByName(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      id: BigNumber;
      selector: string;
      uri: string;
    }
  >;

  getCategoryBySelector(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & { id: BigNumber; name: string; uri: string }
  >;

  getCategoryTemplateLength(
    category: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCategoryTemplatesByIndex(
    category: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    batchLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  getTemplatesCategory(
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isTemplateIdExist(
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeCategoryFromTemplate(
    category: PromiseOrValue<string>,
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTemplateCategory(
    category: PromiseOrValue<string>,
    templateIds_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  templateUri(
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createBatchCategory(
      names: PromiseOrValue<string>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBatchTemplate(
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createCategory(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTemplate(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCategoryTemplates(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCategoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { selector: string; name: string; uri: string }
    >;

    getCategoryByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        selector: string;
        uri: string;
      }
    >;

    getCategoryBySelector(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & { id: BigNumber; name: string; uri: string }
    >;

    getCategoryTemplateLength(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryTemplatesByIndex(
      category: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      batchLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    getTemplatesCategory(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isTemplateIdExist(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCategoryFromTemplate(
      category: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTemplateCategory(
      category: PromiseOrValue<string>,
      templateIds_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    templateUri(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CategoriesSet(string,uint256[])"(
      category?: null,
      templateIds?: null
    ): CategoriesSetEventFilter;
    CategoriesSet(
      category?: null,
      templateIds?: null
    ): CategoriesSetEventFilter;

    "CategoryCreated(string,uint256,bytes4,string)"(
      category?: null,
      id?: null,
      selector?: null,
      uri?: null
    ): CategoryCreatedEventFilter;
    CategoryCreated(
      category?: null,
      id?: null,
      selector?: null,
      uri?: null
    ): CategoryCreatedEventFilter;

    "CategoryRemoved(string,uint256)"(
      category?: null,
      templateId?: null
    ): CategoryRemovedEventFilter;
    CategoryRemoved(
      category?: null,
      templateId?: null
    ): CategoryRemovedEventFilter;

    "TemplateCreated(uint256,string)"(
      templateId?: null,
      uri?: null
    ): TemplateCreatedEventFilter;
    TemplateCreated(templateId?: null, uri?: null): TemplateCreatedEventFilter;
  };

  estimateGas: {
    createBatchCategory(
      names: PromiseOrValue<string>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBatchTemplate(
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCategory(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTemplate(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllCategoryTemplates(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryBySelector(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryTemplateLength(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryTemplatesByIndex(
      category: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      batchLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    getTemplatesCategory(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTemplateIdExist(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCategoryFromTemplate(
      category: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTemplateCategory(
      category: PromiseOrValue<string>,
      templateIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    templateUri(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createBatchCategory(
      names: PromiseOrValue<string>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBatchTemplate(
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCategory(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTemplate(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllCategoryTemplates(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryBySelector(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryTemplateLength(
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryTemplatesByIndex(
      category: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      batchLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastTemplateId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTemplatesCategory(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTemplateIdExist(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCategoryFromTemplate(
      category: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTemplateCategory(
      category: PromiseOrValue<string>,
      templateIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    templateUri(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
