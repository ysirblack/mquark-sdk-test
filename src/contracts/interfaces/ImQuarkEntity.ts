/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ImQuarkEntity {
  export type CollectionParamsStruct = {
    templateId: PromiseOrValue<BigNumberish>;
    collectionURIs: PromiseOrValue<string>[];
    totalSupply: PromiseOrValue<BigNumberish>;
    mintPrice: PromiseOrValue<BigNumberish>;
    mintPerAccountLimit: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    verifier: PromiseOrValue<string>;
    isWhitelisted: PromiseOrValue<boolean>;
  };

  export type CollectionParamsStructOutput = [
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    boolean
  ] & {
    templateId: BigNumber;
    collectionURIs: string[];
    totalSupply: BigNumber;
    mintPrice: BigNumber;
    mintPerAccountLimit: number;
    name: string;
    symbol: string;
    verifier: string;
    isWhitelisted: boolean;
  };
}

export interface ImQuarkEntityInterface extends utils.Interface {
  functions: {
    "addNewCollection(address)": FunctionFragment;
    "createCollection((uint256,string[],uint256,uint256,uint8,string,string,address,bool),bool,uint8,bytes32)": FunctionFragment;
    "getCollectionAddress(uint64)": FunctionFragment;
    "getLastCollectionId()": FunctionFragment;
    "importExternalCollection(uint256,address)": FunctionFragment;
    "transferCollection(address,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewCollection"
      | "createCollection"
      | "getCollectionAddress"
      | "getLastCollectionId"
      | "importExternalCollection"
      | "transferCollection"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      ImQuarkEntity.CollectionParamsStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCollectionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "importExternalCollection",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importExternalCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCollection",
    data: BytesLike
  ): Result;

  events: {
    "CollectionCreated(address,address,address,uint256,uint64,uint256,uint256,uint256,uint256,uint256,string[],uint8,bool,bool,bool)": EventFragment;
    "ExternalCollectionCreated(address,uint256,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalCollectionCreated"): EventFragment;
}

export interface CollectionCreatedEventObject {
  instanceAddress: string;
  verifier: string;
  controller: string;
  entityId: BigNumber;
  collectionId: BigNumber;
  templateId: BigNumber;
  mintPrice: BigNumber;
  totalSupply: BigNumber;
  mintLimitPerWallet: BigNumber;
  royalty: BigNumber;
  collectionURIs: string[];
  mintType: number;
  dynamic: boolean;
  free: boolean;
  whiteListed: boolean;
}
export type CollectionCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    number,
    boolean,
    boolean,
    boolean
  ],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface ExternalCollectionCreatedEventObject {
  collectionAddress: string;
  entityId: BigNumber;
  templateId: BigNumber;
  collectionId: BigNumber;
}
export type ExternalCollectionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExternalCollectionCreatedEventObject
>;

export type ExternalCollectionCreatedEventFilter =
  TypedEventFilter<ExternalCollectionCreatedEvent>;

export interface ImQuarkEntity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImQuarkEntityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      collectionParams: ImQuarkEntity.CollectionParamsStruct,
      isDynamicUri: PromiseOrValue<boolean>,
      ERCimplementation: PromiseOrValue<BigNumberish>,
      merkeRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCollectionAddress(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastCollectionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    importExternalCollection(
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferCollection(
      entity: PromiseOrValue<string>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNewCollection(
    collectionAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    collectionParams: ImQuarkEntity.CollectionParamsStruct,
    isDynamicUri: PromiseOrValue<boolean>,
    ERCimplementation: PromiseOrValue<BigNumberish>,
    merkeRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCollectionAddress(
    collectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastCollectionId(overrides?: CallOverrides): Promise<BigNumber>;

  importExternalCollection(
    templateId: PromiseOrValue<BigNumberish>,
    collectionAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferCollection(
    entity: PromiseOrValue<string>,
    collectionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCollection(
      collectionParams: ImQuarkEntity.CollectionParamsStruct,
      isDynamicUri: PromiseOrValue<boolean>,
      ERCimplementation: PromiseOrValue<BigNumberish>,
      merkeRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollectionAddress(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastCollectionId(overrides?: CallOverrides): Promise<BigNumber>;

    importExternalCollection(
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCollection(
      entity: PromiseOrValue<string>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CollectionCreated(address,address,address,uint256,uint64,uint256,uint256,uint256,uint256,uint256,string[],uint8,bool,bool,bool)"(
      instanceAddress?: null,
      verifier?: null,
      controller?: null,
      entityId?: null,
      collectionId?: null,
      templateId?: null,
      mintPrice?: null,
      totalSupply?: null,
      mintLimitPerWallet?: null,
      royalty?: null,
      collectionURIs?: null,
      mintType?: null,
      dynamic?: null,
      free?: null,
      whiteListed?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      instanceAddress?: null,
      verifier?: null,
      controller?: null,
      entityId?: null,
      collectionId?: null,
      templateId?: null,
      mintPrice?: null,
      totalSupply?: null,
      mintLimitPerWallet?: null,
      royalty?: null,
      collectionURIs?: null,
      mintType?: null,
      dynamic?: null,
      free?: null,
      whiteListed?: null
    ): CollectionCreatedEventFilter;

    "ExternalCollectionCreated(address,uint256,uint256,uint64)"(
      collectionAddress?: null,
      entityId?: null,
      templateId?: null,
      collectionId?: null
    ): ExternalCollectionCreatedEventFilter;
    ExternalCollectionCreated(
      collectionAddress?: null,
      entityId?: null,
      templateId?: null,
      collectionId?: null
    ): ExternalCollectionCreatedEventFilter;
  };

  estimateGas: {
    addNewCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCollection(
      collectionParams: ImQuarkEntity.CollectionParamsStruct,
      isDynamicUri: PromiseOrValue<boolean>,
      ERCimplementation: PromiseOrValue<BigNumberish>,
      merkeRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCollectionAddress(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCollectionId(overrides?: CallOverrides): Promise<BigNumber>;

    importExternalCollection(
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferCollection(
      entity: PromiseOrValue<string>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      collectionParams: ImQuarkEntity.CollectionParamsStruct,
      isDynamicUri: PromiseOrValue<boolean>,
      ERCimplementation: PromiseOrValue<BigNumberish>,
      merkeRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCollectionAddress(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCollectionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importExternalCollection(
      templateId: PromiseOrValue<BigNumberish>,
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferCollection(
      entity: PromiseOrValue<string>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
