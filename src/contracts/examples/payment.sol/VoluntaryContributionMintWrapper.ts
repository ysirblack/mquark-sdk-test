/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface VoluntaryContributionMintWrapperInterface
  extends utils.Interface {
  functions: {
    "getMintStatus()": FunctionFragment;
    "getTotalContribution()": FunctionFragment;
    "mintedAddresses(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setmQuark(address)": FunctionFragment;
    "voluntaryContributionMint(address,bytes,string,bytes)": FunctionFragment;
    "voluntaryContributionWithoutMint()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMintStatus"
      | "getTotalContribution"
      | "mintedAddresses"
      | "onERC721Received"
      | "setAdmin"
      | "setmQuark"
      | "voluntaryContributionMint"
      | "voluntaryContributionWithoutMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMintStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setmQuark",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voluntaryContributionMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voluntaryContributionWithoutMint",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMintStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setmQuark", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voluntaryContributionMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voluntaryContributionWithoutMint",
    data: BytesLike
  ): Result;

  events: {
    "TokenMinted(address,uint256,uint256)": EventFragment;
    "VoluntaryContributionWithoutMint(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VoluntaryContributionWithoutMint"
  ): EventFragment;
}

export interface TokenMintedEventObject {
  from: string;
  amount: BigNumber;
  tokenId: BigNumber;
}
export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface VoluntaryContributionWithoutMintEventObject {
  sender: string;
  amount: BigNumber;
}
export type VoluntaryContributionWithoutMintEvent = TypedEvent<
  [string, BigNumber],
  VoluntaryContributionWithoutMintEventObject
>;

export type VoluntaryContributionWithoutMintEventFilter =
  TypedEventFilter<VoluntaryContributionWithoutMintEvent>;

export interface VoluntaryContributionMintWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoluntaryContributionMintWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMintStatus(overrides?: CallOverrides): Promise<[boolean]>;

    getTotalContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setmQuark(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voluntaryContributionMint(
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voluntaryContributionWithoutMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMintStatus(overrides?: CallOverrides): Promise<boolean>;

  getTotalContribution(overrides?: CallOverrides): Promise<BigNumber>;

  mintedAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setAdmin(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setmQuark(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voluntaryContributionMint(
    signer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    uri: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voluntaryContributionWithoutMint(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMintStatus(overrides?: CallOverrides): Promise<boolean>;

    getTotalContribution(overrides?: CallOverrides): Promise<BigNumber>;

    mintedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setmQuark(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voluntaryContributionMint(
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    voluntaryContributionWithoutMint(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "TokenMinted(address,uint256,uint256)"(
      from?: null,
      amount?: null,
      tokenId?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      from?: null,
      amount?: null,
      tokenId?: null
    ): TokenMintedEventFilter;

    "VoluntaryContributionWithoutMint(address,uint256)"(
      sender?: null,
      amount?: null
    ): VoluntaryContributionWithoutMintEventFilter;
    VoluntaryContributionWithoutMint(
      sender?: null,
      amount?: null
    ): VoluntaryContributionWithoutMintEventFilter;
  };

  estimateGas: {
    getMintStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalContribution(overrides?: CallOverrides): Promise<BigNumber>;

    mintedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setmQuark(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voluntaryContributionMint(
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voluntaryContributionWithoutMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMintStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setmQuark(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voluntaryContributionMint(
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voluntaryContributionWithoutMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
