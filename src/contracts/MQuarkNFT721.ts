/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CollectionStruct = {
  entityId: PromiseOrValue<BigNumberish>;
  collectionId: PromiseOrValue<BigNumberish>;
  mintType: PromiseOrValue<BigNumberish>;
  mintPerAccountLimit: PromiseOrValue<BigNumberish>;
  isWhitelisted: PromiseOrValue<boolean>;
  isFree: PromiseOrValue<boolean>;
  templateId: PromiseOrValue<BigNumberish>;
  mintCount: PromiseOrValue<BigNumberish>;
  totalSupply: PromiseOrValue<BigNumberish>;
  mintPrice: PromiseOrValue<BigNumberish>;
  collectionURIs: PromiseOrValue<string>[];
  name: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  verifier: PromiseOrValue<string>;
};

export type CollectionStructOutput = [
  BigNumber,
  BigNumber,
  number,
  number,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  string,
  string,
  string
] & {
  entityId: BigNumber;
  collectionId: BigNumber;
  mintType: number;
  mintPerAccountLimit: number;
  isWhitelisted: boolean;
  isFree: boolean;
  templateId: BigNumber;
  mintCount: BigNumber;
  totalSupply: BigNumber;
  mintPrice: BigNumber;
  collectionURIs: string[];
  name: string;
  symbol: string;
  verifier: string;
};

export interface MQuarkNFT721Interface extends utils.Interface {
  functions: {
    "ROYALTY_DIVISOR()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCollectionInfo()": FunctionFragment;
    "getOwnerBalance()": FunctionFragment;
    "getProtocolBalance()": FunctionFragment;
    "getProtocolRoyalty()": FunctionFragment;
    "getRoyaltyInfo()": FunctionFragment;
    "initilasiable((uint256,uint64,uint8,uint8,bool,bool,uint256,uint256,uint256,uint256,string[],string,string,address),address,address,bytes32,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintWhitelist(bytes32[],uint256)": FunctionFragment;
    "mintWithURI(address,bytes,string,bytes)": FunctionFragment;
    "mintWithURIWhitelist(bytes32[],address,bytes,string,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "protocolWithdraw()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetSlotToDefault(address,uint256,uint256,string)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "s_ID()": FunctionFragment;
    "s_controller()": FunctionFragment;
    "s_currentTokenId()": FunctionFragment;
    "s_freeMintCollection()": FunctionFragment;
    "s_merkleRoot()": FunctionFragment;
    "s_ownerEntity()": FunctionFragment;
    "s_royaltyPercentage()": FunctionFragment;
    "s_royaltyReceiver()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setRoyaltyInfo(uint16,address)": FunctionFragment;
    "subscribeToEntities(address,uint256,uint256[],string[])": FunctionFragment;
    "subscribeToEntity(address,uint256,uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenEntityURI(uint256,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferCollectionOwnership(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenEntityURI(address,uint256,uint256,string)": FunctionFragment;
    "updateURISlot(address,uint256,uint256,string)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROYALTY_DIVISOR"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getCollectionInfo"
      | "getOwnerBalance"
      | "getProtocolBalance"
      | "getProtocolRoyalty"
      | "getRoyaltyInfo"
      | "initilasiable"
      | "isApprovedForAll"
      | "mint"
      | "mintWhitelist"
      | "mintWithURI"
      | "mintWithURIWhitelist"
      | "name"
      | "owner"
      | "ownerOf"
      | "protocolWithdraw"
      | "renounceOwnership"
      | "resetSlotToDefault"
      | "royaltyInfo"
      | "s_ID"
      | "s_controller"
      | "s_currentTokenId"
      | "s_freeMintCollection"
      | "s_merkleRoot"
      | "s_ownerEntity"
      | "s_royaltyPercentage"
      | "s_royaltyReceiver"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setRoyaltyInfo"
      | "subscribeToEntities"
      | "subscribeToEntity"
      | "supportsInterface"
      | "symbol"
      | "tokenEntityURI"
      | "tokenURI"
      | "transferCollectionOwnership"
      | "transferFrom"
      | "transferOwnership"
      | "transferTokenEntityURI"
      | "updateURISlot"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROYALTY_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initilasiable",
    values: [
      CollectionStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWhitelist",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithURI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithURIWhitelist",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSlotToDefault",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "s_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_currentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_freeMintCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_ownerEntity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_royaltyPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_royaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToEntities",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToEntity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenEntityURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCollectionOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenEntityURI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateURISlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ROYALTY_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initilasiable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithURIWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSlotToDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_controller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_currentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_freeMintCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_merkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_ownerEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_royaltyPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_royaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenEntityURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCollectionOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenEntityURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateURISlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CollectionTransferred(uint64,uint64,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltyInfoUpdated(uint16,address)": EventFragment;
    "TokenMint(uint256,address,uint256,uint256,uint64,uint256,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawProtocol(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProtocol"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CollectionTransferredEventObject {
  newCollectionId: BigNumber;
  previousCollectionId: BigNumber;
  newEntityAddress: string;
}
export type CollectionTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CollectionTransferredEventObject
>;

export type CollectionTransferredEventFilter =
  TypedEventFilter<CollectionTransferredEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoyaltyInfoUpdatedEventObject {
  percentage: number;
  receiver: string;
}
export type RoyaltyInfoUpdatedEvent = TypedEvent<
  [number, string],
  RoyaltyInfoUpdatedEventObject
>;

export type RoyaltyInfoUpdatedEventFilter =
  TypedEventFilter<RoyaltyInfoUpdatedEvent>;

export interface TokenMintEventObject {
  tokenId: BigNumber;
  to: string;
  entityId: BigNumber;
  templateId: BigNumber;
  collectionId: BigNumber;
  amount: BigNumber;
  uri: string;
}
export type TokenMintEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  TokenMintEventObject
>;

export type TokenMintEventFilter = TypedEventFilter<TokenMintEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  to: string;
  amount: BigNumber;
  royalty: BigNumber;
  totalWithdrawn: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawProtocolEventObject {
  to: string;
  amount: BigNumber;
  savedAmountOwner: BigNumber;
  totalWithdrawn: BigNumber;
}
export type WithdrawProtocolEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawProtocolEventObject
>;

export type WithdrawProtocolEventFilter =
  TypedEventFilter<WithdrawProtocolEvent>;

export interface MQuarkNFT721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MQuarkNFT721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROYALTY_DIVISOR(overrides?: CallOverrides): Promise<[number]>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollectionInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string
      ] & {
        entityId: BigNumber;
        collectionId: BigNumber;
        mintType: number;
        mintPerAccountLimit: number;
        isWhitelisted: boolean;
        isFree: boolean;
        templateId: BigNumber;
        mintCount: BigNumber;
        totalSupply: BigNumber;
        mintPrice: BigNumber;
        collectionURIs: string[];
        verifier: string;
      }
    >;

    getOwnerBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getProtocolBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getProtocolRoyalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoyaltyInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        royalty: BigNumber;
        withdrawnAmountByOwner: BigNumber;
        withdrawnAmountByProtocol: BigNumber;
        savedAmountOwner: BigNumber;
        totalWithdrawn: BigNumber;
      }
    >;

    initilasiable(
      _collection: CollectionStruct,
      _collectionOwner: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _mintRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWithURI(
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWithURIWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    protocolWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetSlotToDefault(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    s_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_controller(overrides?: CallOverrides): Promise<[string]>;

    s_currentTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_freeMintCollection(overrides?: CallOverrides): Promise<[boolean]>;

    s_merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    s_ownerEntity(overrides?: CallOverrides): Promise<[string]>;

    s_royaltyPercentage(overrides?: CallOverrides): Promise<[number]>;

    s_royaltyReceiver(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyInfo(
      royaltyPercentage: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeToEntities(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityIds: PromiseOrValue<BigNumberish>[],
      _entityDefaultUris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeToEntity(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenEntityURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferCollectionOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokenEntityURI(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _transferredUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateURISlot(
      _owner: PromiseOrValue<string>,
      _entityId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _updatedUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROYALTY_DIVISOR(overrides?: CallOverrides): Promise<number>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollectionInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      string
    ] & {
      entityId: BigNumber;
      collectionId: BigNumber;
      mintType: number;
      mintPerAccountLimit: number;
      isWhitelisted: boolean;
      isFree: boolean;
      templateId: BigNumber;
      mintCount: BigNumber;
      totalSupply: BigNumber;
      mintPrice: BigNumber;
      collectionURIs: string[];
      verifier: string;
    }
  >;

  getOwnerBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

  getRoyaltyInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      royalty: BigNumber;
      withdrawnAmountByOwner: BigNumber;
      withdrawnAmountByProtocol: BigNumber;
      savedAmountOwner: BigNumber;
      totalWithdrawn: BigNumber;
    }
  >;

  initilasiable(
    _collection: CollectionStruct,
    _collectionOwner: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _mintRoyalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _variationId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWhitelist(
    _merkleProof: PromiseOrValue<BytesLike>[],
    _variationId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWithURI(
    _signer: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    _uri: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWithURIWhitelist(
    _merkleProof: PromiseOrValue<BytesLike>[],
    _signer: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    _uri: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetSlotToDefault(
    _owner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _entityId: PromiseOrValue<BigNumberish>,
    _entityDefaultUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    arg0: PromiseOrValue<BigNumberish>,
    _salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  s_ID(overrides?: CallOverrides): Promise<BigNumber>;

  s_controller(overrides?: CallOverrides): Promise<string>;

  s_currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  s_freeMintCollection(overrides?: CallOverrides): Promise<boolean>;

  s_merkleRoot(overrides?: CallOverrides): Promise<string>;

  s_ownerEntity(overrides?: CallOverrides): Promise<string>;

  s_royaltyPercentage(overrides?: CallOverrides): Promise<number>;

  s_royaltyReceiver(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyInfo(
    royaltyPercentage: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeToEntities(
    _owner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _entityIds: PromiseOrValue<BigNumberish>[],
    _entityDefaultUris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeToEntity(
    _owner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _entityId: PromiseOrValue<BigNumberish>,
    _entityDefaultUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenEntityURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    _entityId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferCollectionOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokenEntityURI(
    _owner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _entityId: PromiseOrValue<BigNumberish>,
    _transferredUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateURISlot(
    _owner: PromiseOrValue<string>,
    _entityId: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _updatedUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROYALTY_DIVISOR(overrides?: CallOverrides): Promise<number>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollectionInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string
      ] & {
        entityId: BigNumber;
        collectionId: BigNumber;
        mintType: number;
        mintPerAccountLimit: number;
        isWhitelisted: boolean;
        isFree: boolean;
        templateId: BigNumber;
        mintCount: BigNumber;
        totalSupply: BigNumber;
        mintPrice: BigNumber;
        collectionURIs: string[];
        verifier: string;
      }
    >;

    getOwnerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        royalty: BigNumber;
        withdrawnAmountByOwner: BigNumber;
        withdrawnAmountByProtocol: BigNumber;
        savedAmountOwner: BigNumber;
        totalWithdrawn: BigNumber;
      }
    >;

    initilasiable(
      _collection: CollectionStruct,
      _collectionOwner: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _mintRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithURI(
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithURIWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolWithdraw(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetSlotToDefault(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    s_ID(overrides?: CallOverrides): Promise<BigNumber>;

    s_controller(overrides?: CallOverrides): Promise<string>;

    s_currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    s_freeMintCollection(overrides?: CallOverrides): Promise<boolean>;

    s_merkleRoot(overrides?: CallOverrides): Promise<string>;

    s_ownerEntity(overrides?: CallOverrides): Promise<string>;

    s_royaltyPercentage(overrides?: CallOverrides): Promise<number>;

    s_royaltyReceiver(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyInfo(
      royaltyPercentage: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToEntities(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityIds: PromiseOrValue<BigNumberish>[],
      _entityDefaultUris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToEntity(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenEntityURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferCollectionOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenEntityURI(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _transferredUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateURISlot(
      _owner: PromiseOrValue<string>,
      _entityId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _updatedUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CollectionTransferred(uint64,uint64,address)"(
      newCollectionId?: null,
      previousCollectionId?: null,
      newEntityAddress?: null
    ): CollectionTransferredEventFilter;
    CollectionTransferred(
      newCollectionId?: null,
      previousCollectionId?: null,
      newEntityAddress?: null
    ): CollectionTransferredEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoyaltyInfoUpdated(uint16,address)"(
      percentage?: null,
      receiver?: null
    ): RoyaltyInfoUpdatedEventFilter;
    RoyaltyInfoUpdated(
      percentage?: null,
      receiver?: null
    ): RoyaltyInfoUpdatedEventFilter;

    "TokenMint(uint256,address,uint256,uint256,uint64,uint256,string)"(
      tokenId?: null,
      to?: null,
      entityId?: null,
      templateId?: null,
      collectionId?: null,
      amount?: null,
      uri?: null
    ): TokenMintEventFilter;
    TokenMint(
      tokenId?: null,
      to?: null,
      entityId?: null,
      templateId?: null,
      collectionId?: null,
      amount?: null,
      uri?: null
    ): TokenMintEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      to?: null,
      amount?: null,
      royalty?: null,
      totalWithdrawn?: null
    ): WithdrawEventFilter;
    Withdraw(
      to?: null,
      amount?: null,
      royalty?: null,
      totalWithdrawn?: null
    ): WithdrawEventFilter;

    "WithdrawProtocol(address,uint256,uint256,uint256)"(
      to?: null,
      amount?: null,
      savedAmountOwner?: null,
      totalWithdrawn?: null
    ): WithdrawProtocolEventFilter;
    WithdrawProtocol(
      to?: null,
      amount?: null,
      savedAmountOwner?: null,
      totalWithdrawn?: null
    ): WithdrawProtocolEventFilter;
  };

  estimateGas: {
    ROYALTY_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    initilasiable(
      _collection: CollectionStruct,
      _collectionOwner: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _mintRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWithURI(
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWithURIWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetSlotToDefault(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_ID(overrides?: CallOverrides): Promise<BigNumber>;

    s_controller(overrides?: CallOverrides): Promise<BigNumber>;

    s_currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    s_freeMintCollection(overrides?: CallOverrides): Promise<BigNumber>;

    s_merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    s_ownerEntity(overrides?: CallOverrides): Promise<BigNumber>;

    s_royaltyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    s_royaltyReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltyInfo(
      royaltyPercentage: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeToEntities(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityIds: PromiseOrValue<BigNumberish>[],
      _entityDefaultUris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeToEntity(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenEntityURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferCollectionOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokenEntityURI(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _transferredUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateURISlot(
      _owner: PromiseOrValue<string>,
      _entityId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _updatedUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROYALTY_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolRoyalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initilasiable(
      _collection: CollectionStruct,
      _collectionOwner: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _mintRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _variationId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWithURI(
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWithURIWhitelist(
      _merkleProof: PromiseOrValue<BytesLike>[],
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetSlotToDefault(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_currentTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_freeMintCollection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_ownerEntity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_royaltyPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_royaltyReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyInfo(
      royaltyPercentage: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeToEntities(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityIds: PromiseOrValue<BigNumberish>[],
      _entityDefaultUris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeToEntity(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _entityDefaultUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenEntityURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferCollectionOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenEntityURI(
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entityId: PromiseOrValue<BigNumberish>,
      _transferredUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateURISlot(
      _owner: PromiseOrValue<string>,
      _entityId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _updatedUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
